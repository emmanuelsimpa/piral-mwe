"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPageLayoutsApi = void 0;
const actions = require("./actions");
const react_1 = require("react");
const piral_core_1 = require("piral-core");
function getPageLayouts(items) {
    const layouts = {};
    if (items && typeof items === 'object') {
        Object.keys(items).forEach((name) => {
            layouts[name] = {
                pilet: undefined,
                component: items[name],
            };
        });
    }
    return layouts;
}
const DefaultWrapper = (props) => (0, piral_core_1.defaultRender)(props.children);
function createPageWrapper(Wrapper = DefaultWrapper, fallback = 'default') {
    return (props) => {
        var _a;
        const layout = ((_a = props.meta) === null || _a === void 0 ? void 0 : _a.layout) || fallback;
        const registration = (0, piral_core_1.useGlobalState)((s) => s.registry.pageLayouts[layout] || s.registry.pageLayouts[fallback]);
        const Layout = (registration === null || registration === void 0 ? void 0 : registration.component) || DefaultWrapper;
        return (0, react_1.createElement)(Layout, props, (0, react_1.createElement)(Wrapper, props));
    };
}
function withPageLayouts(pageLayouts, fallback) {
    return (state) => (Object.assign(Object.assign({}, state), { registry: Object.assign(Object.assign({}, state.registry), { wrappers: Object.assign(Object.assign({}, state.registry.wrappers), { page: createPageWrapper(state.registry.wrappers.page, fallback) }), pageLayouts }) }));
}
/**
 * Creates new Pilet API extensions for dealing with page layouts.
 */
function createPageLayoutsApi(config = {}) {
    const { layouts = {}, fallback } = config;
    return (context) => {
        const findPageLayout = (name) => context.readState((s) => s.registry.pageLayouts[name]);
        context.defineActions(actions);
        context.dispatch(withPageLayouts(getPageLayouts(layouts), fallback));
        return (api) => {
            const pilet = api.meta.name;
            return {
                registerPageLayout(name, pageLayout) {
                    const current = findPageLayout(name);
                    if (!current || current.pilet === pilet) {
                        const component = (0, piral_core_1.withApi)(context, pageLayout, api, 'pageLayout');
                        context.registerPageLayout(name, {
                            component,
                            pilet,
                        });
                    }
                    return () => api.unregisterPageLayout(name);
                },
                unregisterPageLayout(name) {
                    const current = findPageLayout(name);
                    if ((current === null || current === void 0 ? void 0 : current.pilet) === pilet) {
                        context.unregisterPageLayout(name);
                    }
                },
            };
        };
    };
}
exports.createPageLayoutsApi = createPageLayoutsApi;
//# sourceMappingURL=create.js.map